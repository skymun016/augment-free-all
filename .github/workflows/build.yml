name: Build Multi-Platform Releases

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  build:
    strategy:
      matrix:
        include:
          # Windows builds
          - os: windows-latest
            python-version: '3.9'
            arch: 'x64'
            platform: 'Windows-x64'
          # Note: Windows ARM64 support temporarily disabled due to GitHub Actions limitations
          # Will be re-enabled when GitHub Actions provides better ARM64 Python support
          # macOS builds
          - os: macos-13  # Intel
            python-version: '3.9'
            arch: 'x64'
            platform: 'macOS-Intel'
          - os: macos-latest  # Apple Silicon (M1/M2)
            python-version: '3.9'
            arch: 'arm64'
            platform: 'macOS-AppleSilicon'
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        architecture: ${{ matrix.arch }}
    

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller build wheel setuptools
    
    - name: Build with PyInstaller (Windows)
      if: startsWith(matrix.os, 'windows')
      run: |
        pyinstaller --onefile --windowed --name "AugmentCode-Free-${{ github.ref_name }}-${{ matrix.platform }}" --distpath dist --add-data "augment_tools_core;augment_tools_core" --add-data "gui_qt6;gui_qt6" --add-data "languages;languages" --add-data "config;config" --hidden-import PyQt6 --hidden-import PyQt6.QtWidgets --hidden-import PyQt6.QtCore --hidden-import PyQt6.QtGui --hidden-import psutil --hidden-import xml.etree.ElementTree main.py
    
    - name: Build with PyInstaller (macOS)
      if: startsWith(matrix.os, 'macos')
      run: |
        # First build the executable
        pyinstaller --onefile --windowed --name "AugmentCode-Free" --distpath dist --add-data "augment_tools_core:augment_tools_core" --add-data "gui_qt6:gui_qt6" --add-data "languages:languages" --add-data "config:config" --hidden-import PyQt6 --hidden-import PyQt6.QtWidgets --hidden-import PyQt6.QtCore --hidden-import PyQt6.QtGui --hidden-import psutil --hidden-import xml.etree.ElementTree main.py

        # Create .app bundle structure
        APP_NAME="AugmentCode-Free-${{ github.ref_name }}-${{ matrix.platform }}.app"
        mkdir -p "dist/$APP_NAME/Contents/MacOS"
        mkdir -p "dist/$APP_NAME/Contents/Resources"

        # Move executable to app bundle
        mv "dist/AugmentCode-Free" "dist/$APP_NAME/Contents/MacOS/"

        # Create Info.plist
        cat > "dist/$APP_NAME/Contents/Info.plist" << 'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleExecutable</key>
            <string>AugmentCode-Free</string>
            <key>CFBundleIdentifier</key>
            <string>com.augmentcode.free</string>
            <key>CFBundleName</key>
            <string>AugmentCode-Free</string>
            <key>CFBundleDisplayName</key>
            <string>AugmentCode-Free</string>
            <key>CFBundleVersion</key>
            <string>${{ github.ref_name }}</string>
            <key>CFBundleShortVersionString</key>
            <string>${{ github.ref_name }}</string>
            <key>CFBundleInfoDictionaryVersion</key>
            <string>6.0</string>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
            <key>LSMinimumSystemVersion</key>
            <string>10.15</string>
            <key>NSHighResolutionCapable</key>
            <true/>
            <key>NSRequiresAquaSystemAppearance</key>
            <false/>
            <key>LSApplicationCategoryType</key>
            <string>public.app-category.developer-tools</string>
        </dict>
        </plist>
        EOF

        # Make executable
        chmod +x "dist/$APP_NAME/Contents/MacOS/AugmentCode-Free"

        # Also create a traditional executable for backward compatibility
        cp "dist/$APP_NAME/Contents/MacOS/AugmentCode-Free" "dist/AugmentCode-Free-${{ github.ref_name }}-${{ matrix.platform }}"

    - name: Create DMG (macOS)
      if: startsWith(matrix.os, 'macos')
      run: |
        APP_NAME="AugmentCode-Free-${{ github.ref_name }}-${{ matrix.platform }}.app"
        DMG_NAME="AugmentCode-Free-${{ github.ref_name }}-${{ matrix.platform }}.dmg"

        # Create temporary DMG directory
        mkdir -p dmg_temp
        cp -R "dist/$APP_NAME" dmg_temp/

        # Create a symbolic link to Applications folder
        ln -s /Applications dmg_temp/Applications

        # Create DMG
        hdiutil create -volname "AugmentCode-Free ${{ github.ref_name }}" \
          -srcfolder dmg_temp \
          -ov -format UDZO \
          "dist/$DMG_NAME"

        # Clean up
        rm -rf dmg_temp

    - name: Create portable package
      run: |
        mkdir -p portable
        cp -r augment_tools_core portable/
        cp -r gui_qt6 portable/
        cp -r languages portable/
        cp -r config portable/
        cp main.py portable/
        cp requirements.txt portable/
        cp README.md portable/
        cp LICENSE portable/
    
    - name: Create startup scripts (Windows)
      if: startsWith(matrix.os, 'windows')
      run: |
        echo '@echo off' > portable/start.bat
        echo 'chcp 65001 >nul' >> portable/start.bat
        echo 'echo Starting AugmentCode-Free...' >> portable/start.bat
        echo 'python main.py' >> portable/start.bat
        echo 'pause' >> portable/start.bat

    - name: Create startup scripts (Unix)
      if: startsWith(matrix.os, 'macos')
      run: |
        echo '#!/bin/bash' > portable/start.sh
        echo 'echo "Starting AugmentCode-Free..."' >> portable/start.sh
        echo 'python3 main.py' >> portable/start.sh
        chmod +x portable/start.sh
    
    - name: Create archives
      run: |
        # Create portable archive
        if [[ "${{ matrix.os }}" == windows* ]]; then
          7z a "AugmentCode-Free-${{ github.ref_name }}-Portable-${{ matrix.platform }}.zip" portable/
        else
          tar -czf "AugmentCode-Free-${{ github.ref_name }}-Portable-${{ matrix.platform }}.tar.gz" portable/
        fi
      shell: bash
    
    - name: Generate checksums
      run: |
        if [[ "${{ matrix.os }}" == windows* ]]; then
          certutil -hashfile "dist/AugmentCode-Free-${{ github.ref_name }}-${{ matrix.platform }}.exe" SHA256 > dist/checksums.txt
          certutil -hashfile "AugmentCode-Free-${{ github.ref_name }}-Portable-${{ matrix.platform }}.zip" SHA256 >> dist/checksums.txt
        else
          # Traditional executable
          shasum -a 256 "dist/AugmentCode-Free-${{ github.ref_name }}-${{ matrix.platform }}" > dist/checksums.txt
          # Portable package
          shasum -a 256 "AugmentCode-Free-${{ github.ref_name }}-Portable-${{ matrix.platform }}.tar.gz" >> dist/checksums.txt
          # macOS specific files
          if [[ "${{ matrix.os }}" == macos* ]]; then
            # Create tar archive of .app bundle for checksum
            tar -czf "dist/AugmentCode-Free-${{ github.ref_name }}-${{ matrix.platform }}.app.tar.gz" -C dist "AugmentCode-Free-${{ github.ref_name }}-${{ matrix.platform }}.app"
            shasum -a 256 "dist/AugmentCode-Free-${{ github.ref_name }}-${{ matrix.platform }}.app.tar.gz" >> dist/checksums.txt
            shasum -a 256 "dist/AugmentCode-Free-${{ github.ref_name }}-${{ matrix.platform }}.dmg" >> dist/checksums.txt
          fi
        fi
      shell: bash
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: AugmentCode-Free-${{ matrix.platform }}
        path: |
          dist/*
          *.zip
          *.tar.gz
        retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          */dist/*
          */*.zip
          */*.tar.gz
        draft: false
        prerelease: false
        generate_release_notes: true
        token: ${{ secrets.GITHUB_TOKEN }}
