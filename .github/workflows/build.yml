name: Build Multi-Platform Releases

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9']
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libxcb-xinerama0 libxcb-cursor0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-render-util0 libxcb-shape0 libxcb-util1 libxcb-xkb1 libxkbcommon-x11-0
        sudo apt-get install -y libegl1-mesa libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xfixes0
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller build wheel setuptools
    
    - name: Build with PyInstaller (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        pyinstaller --onefile --windowed --name "AugmentCode-Free-v1.0.5-Windows" --distpath dist --add-data "augment_tools_core;augment_tools_core" --add-data "gui_qt6;gui_qt6" --add-data "languages;languages" --add-data "config;config" --hidden-import PyQt6 --hidden-import PyQt6.QtWidgets --hidden-import PyQt6.QtCore --hidden-import PyQt6.QtGui --hidden-import psutil --hidden-import xml.etree.ElementTree main.py
    
    - name: Build with PyInstaller (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        pyinstaller --onefile --windowed --name "AugmentCode-Free-v1.0.5-macOS" --distpath dist --add-data "augment_tools_core:augment_tools_core" --add-data "gui_qt6:gui_qt6" --add-data "languages:languages" --add-data "config:config" --hidden-import PyQt6 --hidden-import PyQt6.QtWidgets --hidden-import PyQt6.QtCore --hidden-import PyQt6.QtGui --hidden-import psutil --hidden-import xml.etree.ElementTree main.py
    
    - name: Build with PyInstaller (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        pyinstaller --onefile --name "AugmentCode-Free-v1.0.5-Linux" --distpath dist --add-data "augment_tools_core:augment_tools_core" --add-data "gui_qt6:gui_qt6" --add-data "languages:languages" --add-data "config:config" --hidden-import PyQt6 --hidden-import PyQt6.QtWidgets --hidden-import PyQt6.QtCore --hidden-import PyQt6.QtGui --hidden-import psutil --hidden-import xml.etree.ElementTree main.py
    
    - name: Create portable package
      run: |
        mkdir -p portable
        cp -r augment_tools_core portable/
        cp -r gui_qt6 portable/
        cp -r languages portable/
        cp -r config portable/
        cp main.py portable/
        cp requirements.txt portable/
        cp README.md portable/
        cp LICENSE portable/
    
    - name: Create startup scripts (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        echo '@echo off' > portable/start.bat
        echo 'chcp 65001 >nul' >> portable/start.bat
        echo 'echo Starting AugmentCode-Free...' >> portable/start.bat
        echo 'python main.py' >> portable/start.bat
        echo 'pause' >> portable/start.bat
    
    - name: Create startup scripts (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        echo '#!/bin/bash' > portable/start.sh
        echo 'echo "Starting AugmentCode-Free..."' >> portable/start.sh
        echo 'python3 main.py' >> portable/start.sh
        chmod +x portable/start.sh
    
    - name: Create archives
      run: |
        # Create portable archive
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          7z a "AugmentCode-Free-v1.0.5-Portable-Windows.zip" portable/
        else
          tar -czf "AugmentCode-Free-v1.0.5-Portable-${{ matrix.os }}.tar.gz" portable/
        fi
      shell: bash
    
    - name: Generate checksums
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          certutil -hashfile dist/AugmentCode-Free-v1.0.5-Windows.exe SHA256 > dist/checksums.txt
          certutil -hashfile AugmentCode-Free-v1.0.5-Portable-Windows.zip SHA256 >> dist/checksums.txt
        elif [ "${{ matrix.os }}" = "macos-latest" ]; then
          shasum -a 256 dist/AugmentCode-Free-v1.0.5-macOS > dist/checksums.txt
          shasum -a 256 AugmentCode-Free-v1.0.5-Portable-macos-latest.tar.gz >> dist/checksums.txt
        else
          sha256sum dist/AugmentCode-Free-v1.0.5-Linux > dist/checksums.txt
          sha256sum AugmentCode-Free-v1.0.5-Portable-ubuntu-latest.tar.gz >> dist/checksums.txt
        fi
      shell: bash
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: AugmentCode-Free-${{ matrix.os }}
        path: |
          dist/
          *.zip
          *.tar.gz
        retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          */dist/*
          */*.zip
          */*.tar.gz
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
